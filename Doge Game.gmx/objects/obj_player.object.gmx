<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Key Inputs
right = ord("D");
left = ord("A");
up = ord("W");
down = ord("S");

// Player Movement Variables
fric = 0.5;
hspd = 0;
vspd = 0;
haccel = 1;
vaccel = 1;
maxspd = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Player Movement
h_move = keyboard_check(right) - keyboard_check(left);
v_move = keyboard_check(down) - keyboard_check(up);

    // Basic Friction
if (abs(hspd) &lt; fric) hspd = 0
else hspd += -fric * sign(hspd)

if (abs(vspd) &lt;  fric) vspd = 0
else vspd += -fric * sign(vspd);

    // Keyboard Input for Movement
if (h_move) hspd += haccel;
else if (h_move == -1) hspd -= haccel;

if (v_move) vspd += vaccel;
else if (v_move == -1) vspd -= vaccel;

    // Capping Movement at Max Speed
eff_spd = sqrt(sqr(hspd) + sqr(vspd));
dir = degtorad(point_direction(x, y, x + hspd, y + vspd))
if (eff_spd &gt; maxspd) {
    vspd = -maxspd * sin(dir);
    hspd = maxspd * cos(dir);
    
}
    // Movement Resolution
x += hspd;
y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
